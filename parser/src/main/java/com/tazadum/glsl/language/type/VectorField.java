package com.tazadum.glsl.language.type;

import com.tazadum.glsl.exception.NoSuchFieldException;
import com.tazadum.glsl.exception.TypeException;
import com.tazadum.glsl.parser.TypeCombination;

import static com.tazadum.glsl.exception.Errors.Coarse.ILLEGAL_SWIZZLE;
import static com.tazadum.glsl.exception.Errors.Coarse.INCOMPATIBLE_TYPE;
import static com.tazadum.glsl.exception.Errors.Extras.INVALID_SWIZZLE;

public class VectorField {
    public static final int DEFAULT_SET = 0;
    private static final String[] fieldSelection = {"xyzw", "rgba", "stpq"};

    private final PredefinedType baseType;
    private int[] field;
    private boolean inOrder;

    public VectorField(PredefinedType baseType, String selection) throws NoSuchFieldException {
        this(baseType, null, selection);
    }

    public VectorField(PredefinedType baseType, PredefinedType type, String selection) throws NoSuchFieldException {
        this.baseType = baseType;
        field = new int[selection.length()];
        inOrder = true;

        if (baseType.category() == TypeCategory.Scalar &&
                selection.length() == 1 &&
                vectorComponentIndex(selection.charAt(0)) == 0) {
            field[0] = 0;
        } else {
            for (int i = 0; i < field.length; i++) {
                final int index = vectorComponentIndex(selection.charAt(i));

                if (index < 0 || type != null && index >= type.components()) {
                    throw new NoSuchFieldException(ILLEGAL_SWIZZLE(selection.charAt(i)));
                }

                if (i != index) {
                    inOrder = false;
                }

                field[i] = index;
            }
        }
    }

    /**
     * Returns true if the provided character is a valid vector field component.
     */
    public static boolean isVectorComponent(char ch) {
        return vectorComponentIndex(ch) >= 0;
    }

    public static char getVectorComponent(int index, int set) {
        if (set < 0 || set >= fieldSelection.length) {
            return fieldSelection[0].charAt(0);
        }
        if (index < 0 || index > 3) {
            return fieldSelection[set].charAt(0);
        }
        return fieldSelection[set].charAt(index);
    }

    public static int vectorComponentIndex(char ch) {
        switch (ch) {
            case 'r': // rgba
            case 's': // stpq
            case 'x': // xyzw
                return 0;
            case 'g': // rgba
            case 't': // stpg
            case 'y': // xyzw
                return 1;
            case 'b': // rgba
            case 'p': // stpg
            case 'z': // xyzw
                return 2;
            case 'a': // rgba
            case 'q': // stpg
            case 'w': // xyzw
                return 3;
            default:
                return -1;
        }
    }

    public int components() {
        return field.length;
    }

    /**
     * Returns the 0-base index of the component.
     *
     * @param fieldIndex The field index.
     */
    public int indexOf(int fieldIndex) {
        if (fieldIndex < 0 || fieldIndex >= field.length) {
            return -1;
        }
        return field[fieldIndex];
    }

    /**
     * Returns true if the components in the field are in order.
     *
     * @return true if the components are in order.
     */
    public boolean componentsInOrder() {
        return inOrder;
    }

    public String render(int set) {
        StringBuilder builder = new StringBuilder();
        for (int index : field) {
            builder.append(getVectorComponent(index, set));
        }
        return builder.toString();
    }

    public String toString() {
        return render(0);
    }

    /**
     * Returns the type that is generated by this swizzle based on the baseType.
     */
    public PredefinedType getType() throws TypeException {
        for (PredefinedType type : PredefinedType.values()) {
            if (!TypeCombination.ofAnyCategory(type, TypeCategory.Scalar, TypeCategory.Vector)) {
                continue;
            }
            if (components() == 1) {
                // a special case for scalar types
                if (type == baseType) {
                    return type;
                }
                continue;
            }
            if (type.components() == components() && type.baseType() == baseType) {
                return type;
            }
        }

        throw new TypeException(INCOMPATIBLE_TYPE(baseType, INVALID_SWIZZLE));
    }
}
